<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event inherited
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initiate instance variables
textPlacementCalculated = false;
text = "blank"
print = "";
textSpeed = 1; 
counter = 1;        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event inherited
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add to print string

if(fullSize)
{
  
  //for(i = 0; i &lt; 7; i++)
  /*copy chars from text....*/
  if (counter &lt;= textLength)
  {
  copier = string_copy(text, counter, 1);
  //print = string_copy(text, 2, 1);
  //print = string_copy(text, 3, 1);
  
  /* find last index of print */
  printLength = string_length(print)
  
  /* ....to print */
  print = string_insert(copier, print, printLength + 1);
  /*increment text counter by textSpeed? */
  counter++;
  }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event inherited
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///determine text area size/ how many strings/pages nessecary


xTLText = xTLFinal + margin + padding;
yTLText = yTLFinal + margin + padding;

xBRText = xBRFinal - margin - padding;
yBRText = yBRFinal - margin - padding;

xBLText = xBLFinal + margin + padding;
yBLText = yBLFinal - margin - padding;

xTRText = xTRFinal - margin - padding;
yTRText = yTRFinal + margin + padding;


textAreaWidth = xTRText - xTLText;
textAreaHeight = yBRText - yTRText;

lineHeight = string_height(text);





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create line spacing array

lineCount = 0;
var linePlacement = 0;
while(linePlacement &lt; textAreaHeight)
{
  yLineArr[lineCount] = linePlacement + yTLText;  
  linePlacement += lineHeight;
  lineCount++;
  

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create individual line strings
textLength = string_length(text);
currentLine = 0;
copier = 1;
counter = 0;

for(var i = 0; i &lt; lineCount; i++)
{
  lineArr[i] = "";
}
textWidth = 0;
while (textWidth &lt;= textAreaWidth &amp;&amp; counter &lt; textLength)
  {
  copier = string_copy(text, counter, 1);
  lineLength = string_length(lineArr[currentLine])
  lineArr[currentLine] = string_insert(copier, lineArr[currentLine], lineLength);
  counter++;
  textWidth++;
  }
/* line break */  
  
  

/*move to step*/
/*
if (counter &lt;= textLength)
{
  copier = string_copy(text, counter, 1);
  currentLlineLength = string_length(lineArr[currentLine])
  print = string_insert(copier, print, currentLineLength + 1);
  counter++;  
}
*/

textPlacementCalculated = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event inherited
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw text area outline for debug
draw_circle_colour(xTLText, yTLText, 2, c_red, c_red, false);
draw_circle_colour(xBRText, yBRText, 2, c_orange, c_orange, false);
draw_circle_colour(xBLText, yBLText, 2, c_green, c_green, false);
draw_circle_colour(xTRText, yTRText, 2, c_blue, c_blue, false);
if (textPlacementCalculated)
{
    draw_line(xTLText, yTLText, xBLText, yBLText);
    draw_line(xTRText, yTRText, xBRText, yBRText);
    draw_line(xTLText, yLineArr[0], xTRText, yLineArr[0]);
    draw_line(xTLText, yLineArr[1], xTRText, yLineArr[1]);
    draw_line(xTLText, yLineArr[2], xTRText, yLineArr[2]);
    draw_line(xTLText, yLineArr[3], xTRText, yLineArr[3]);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw text
if (fullSize) 
{
  for(var i = 0; i &lt; lineCount; i++)
  {
    draw_text(xTLText, yLineArr[i], lineArr[i]);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
