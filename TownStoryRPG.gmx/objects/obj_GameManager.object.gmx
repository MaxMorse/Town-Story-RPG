<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
//Create keyboard booleans
isLeftPressed = false;
isRightPressed = false;
isUpPressed = false;
isDownPressed = false;
canPlayerInput = true;
isPlayerMoving = false;
isBarrelMoving = false;
//Create gameboard
width = 20;
height = 20;

counter = 0;
canTransition = true;


for (var i = 0; i &lt; width; i++)
{
    for (var j = 0; j &lt; height; j++ )
    {
        unitArr[i, j] = instance_create(i * UNIT_SIZE, j * UNIT_SIZE, obj_Unit);
    }
}

/*
for (var i = 0; i &lt; width; i++)
{
    posArr[i] = UNIT_SIZE * i;   
}
*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///placeObjects


player = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 5, obj_Player);
barrel = instance_create(UNIT_SIZE * 7, UNIT_SIZE * 5, obj_Barrel);
wallArray[0] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 7, obj_Wall);
wallArray[1] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 12, obj_Wall);
wallArray[2] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 9, obj_Wall);
wallArray[3] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 10, obj_Wall);
wallArray[4] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 11, obj_Wall);

wallArray[5] = instance_create(UNIT_SIZE * 3, UNIT_SIZE * 7, obj_Wall);

wallArray[6] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 7, obj_Wall);
wallArray[7] = instance_create(UNIT_SIZE * 6, UNIT_SIZE * 7, obj_Wall);

wallArray[8] = instance_create(UNIT_SIZE * 10, UNIT_SIZE * 10, obj_Wall);

wallArray[9] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 7, obj_Wall);
wallArray[10] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 12, obj_Wall);
wallArray[11] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 9, obj_Wall);
wallArray[12] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 10, obj_Wall);
wallArray[13] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 11, obj_Wall);

wallArray[14] = instance_create(UNIT_SIZE * 6, UNIT_SIZE * 7, obj_Wall);
wallArray[15] = instance_create(UNIT_SIZE * 7, UNIT_SIZE * 7, obj_Wall);
doorway = instance_create(UNIT_SIZE * 6, UNIT_SIZE * 12, obj_DoorWay);
powerUp = instance_create(UNIT_SIZE * 11, UNIT_SIZE * 11, obj_PowerUp);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init text bank
tBank = instance_create(0, 0, obj_TextBank);

//inventory1 = instance_create(0, 0, obj_inventory);
//textBox = placeWindow(view_xport[0], view_hport[0] - 116, view_wport[0] - 16, 100);
//menu = placeWindow(view_xport[0], view_yport[0], 100, view_hport[0])
//testBox = placeWindow(100, 32, 700, 50);
//textBox = createTextBox(8, 200, view_wview[0] - 45, 100, tBank.sampleText1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Transition
canPlayerInput = false;
room_goto(rm_TestRoom2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard Input
if (keyboard_check(vk_right))
{
    isRightPressed = true;
}
else if (!keyboard_check(vk_right))
{
    isRightPressed = false;
}
if (keyboard_check(vk_left))
{
    isLeftPressed = true;
}
else if (!keyboard_check(vk_left))
{
    isLeftPressed = false;
}
if (keyboard_check(vk_up))
{
    isUpPressed = true;
}
else if (!keyboard_check(vk_up))
{
    isUpPressed = false;
}
if (keyboard_check(vk_down))
{
    isDownPressed = true;
}
else if (!keyboard_check(vk_down))
{
    isDownPressed = false;
}
if (keyboard_check_pressed(ord('P')))
{
  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Player
if (canPlayerInput)
{
    if (isRightPressed)
    {   
        //if (getXPosition(player) &lt; array_length_2d(unitArr,0)-1)
        //{
            neighboringUnit = (unitArr[getXPosition(player) + 1, getYPosition(player)])
            manageMovement(player, neighboringUnit, RIGHT)
            //var neighbor = whatIsHere(unitArr[getXPosition(player) + 1, getYPosition(player)]);
            //triggerMoveEffects(player, neighbor, RIGHT);       
        //} 
    }
    else if (isLeftPressed)
    {
        //if (getXPosition(player) == 0)
        //{
            neighboringUnit = (unitArr[getXPosition(player) - 1, getYPosition(player)])
            manageMovement(player, neighboringUnit, LEFT)
            //var neighbor = whatIsHere(unitArr[getXPosition(player) - 1, getYPosition(player)]);
            //triggerMoveEffects(player, neighbor, LEFT);     
        //}
    }
    else if (isUpPressed)
    {   
        //if (getYPosition(player) == 0)
        //{
            neighboringUnit = (unitArr[getXPosition(player), getYPosition(player) - 1])
            manageMovement(player, neighboringUnit, UP)
            //var neighbor = whatIsHere(unitArr[getXPosition(player), getYPosition(player) - 1]);
            //triggerMoveEffects(player, neighbor, UP);   
        //}
    }
    else if (isDownPressed)
    {
        //if (getYPosition(player) &lt; array_height_2d(unitArr)-1)
        //{
            neighboringUnit = (unitArr[getXPosition(player), getYPosition(player) + 1])
            manageMovement(player, neighboringUnit, DOWN)
            //var neighbor = whatIsHere(unitArr[getXPosition(player), getYPosition(player) + 1]);
            //triggerMoveEffects(player, neighbor, DOWN);
        //}
    }
}

if(isPlayerMoving)
{
    moveObject(player,player.direction,PLAYER_SPEED);
    if (player.x % UNIT_SIZE == 0 &amp;&amp; player.y % UNIT_SIZE == 0)
    {
        isPlayerMoving = false;
        canPlayerInput = true;
    }
}
if(isBarrelMoving)
{
    moveObject(barrel,player.direction,PLAYER_SPEED);
    if (barrel.x % UNIT_SIZE == 0 &amp;&amp; barrel.y % UNIT_SIZE == 0)
    {
        isBarrelMoving = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room transitions
//counter++;
if (canTransition = true)
{
    if(position_meeting(doorway.x, doorway.y, player))
    //if counter = 180
    {
        canPlayerInput = false;
        canTransition = false;
        alarm[0] = UNIT_SIZE/PLAYER_SPEED+PLAYER_SPEED;
       //canPlayerInput = false;
       //room_goto(rm_TestRoom2);
       //show_debug_message("Rorrrrrr!!!!!");    
    }
}
//show_debug_message("test room 2 maybe?: " + string(room_exists(rm_TestRoom2)))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///loadRoom 

if (room == rm_TestRoom)
{
player = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 5, obj_Player);
barrel = instance_create(UNIT_SIZE * 7, UNIT_SIZE * 5, obj_Barrel);
wallArray[0] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 7, obj_Wall);
wallArray[1] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 12, obj_Wall);
wallArray[2] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 9, obj_Wall);
wallArray[3] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 10, obj_Wall);
wallArray[4] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 11, obj_Wall);

wallArray[5] = instance_create(UNIT_SIZE * 3, UNIT_SIZE * 7, obj_Wall);

wallArray[6] = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 7, obj_Wall);
wallArray[7] = instance_create(UNIT_SIZE * 6, UNIT_SIZE * 7, obj_Wall);

wallArray[8] = instance_create(UNIT_SIZE * 10, UNIT_SIZE * 10, obj_Wall);

wallArray[9] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 7, obj_Wall);
wallArray[10] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 12, obj_Wall);
wallArray[11] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 9, obj_Wall);
wallArray[12] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 10, obj_Wall);
wallArray[13] = instance_create(UNIT_SIZE * 8, UNIT_SIZE * 11, obj_Wall);

wallArray[14] = instance_create(UNIT_SIZE * 6, UNIT_SIZE * 7, obj_Wall);
wallArray[15] = instance_create(UNIT_SIZE * 7, UNIT_SIZE * 7, obj_Wall);
doorway = instance_create(UNIT_SIZE * 6, UNIT_SIZE * 12, obj_DoorWay);
powerUp = instance_create(UNIT_SIZE * 11, UNIT_SIZE * 11, obj_PowerUp);
}
else if (room == rm_TestRoom2)
{
    player = instance_create(UNIT_SIZE * 5, UNIT_SIZE * 5, obj_Player);
barrel = instance_create(UNIT_SIZE * 7, UNIT_SIZE * 5, obj_Barrel);
powerUp = instance_create(UNIT_SIZE * 11, UNIT_SIZE * 11, obj_PowerUp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
